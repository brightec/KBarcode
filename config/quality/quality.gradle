/**
 * Gradle tasks added:
 * - checkstyle
 * - pmd
 * - ktlint
 * - detekt
 * - XmlChecker
 *
 * These tasks above are added to perform code analysis. They are dependencies of the check task
 * so running check will run all of them.
 */

apply plugin: 'checkstyle'
apply plugin: 'pmd'

repositories {
    mavenCentral()
}

def qualityConfigDir = "$project.rootDir/config/quality"
def reportsDir = "$project.buildDir/reports"

configurations {
    ktlint
    detekt
    xmlchecker
}

pmd {
    toolVersion = '6.20.0'
}

dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle:8.27'

    ktlint 'com.pinterest:ktlint:0.41.0'
    ktlint fileTree(dir: "$qualityConfigDir/ktlint/libs", include: ['*.jar'])

    detekt 'io.gitlab.arturbosch.detekt:detekt-cli:1.17.1'

    xmlchecker fileTree(dir: "$qualityConfigDir/xmlchecker/libs", include: ['*.jar'])
}

check.dependsOn 'checkstyle', 'pmd', 'ktlint', 'detekt', 'xmlchecker'

task checkstyle(type: Checkstyle, group: 'Verification') {
    description = 'Check Java code style.'
    configFile = file("$qualityConfigDir/checkstyle/checkstyle-config.xml")

    source 'src'
    include '**/*.java'

    reports {
        xml {
            enabled = true
            destination file("$reportsDir/checkstyle/checkstyle.xml")
        }
        html {
            enabled = false
            destination file("$reportsDir/checkstyle/checkstyle.html")
        }
    }

    classpath = files()
}

task pmd(type: Pmd, group: 'Verification') {
    description = 'Check Java for bugs.'
    ruleSetFiles = files("$qualityConfigDir/pmd/pmd-ruleset.xml",
            "$qualityConfigDir/pmd/pmd-test-ruleset.xml")
    ignoreFailures = false
    ruleSets = []
    consoleOutput = true

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml {
            enabled = true
            destination file("$reportsDir/pmd/pmd.xml")
        }
        html {
            enabled = false
            destination file("$reportsDir/pmd/pmd.html")
        }
    }
}

task ktlint(type: JavaExec, group: 'verification') {
    description = 'Check Kotlin code style.'
    main = 'com.pinterest.ktlint.Main'
    classpath = configurations.ktlint
    args 'src/**/*.kt'
    args '--reporter=plain', "--reporter=checkstyle,output=${reportsDir}/ktlint/ktlint.xml"
    args '--verbose'
    args '--disabled_rules=import-ordering'
}

task ktlintFormat(type: JavaExec, group: 'formatting') {
    description = 'Fix Kotlin code style deviations.'
    main = 'com.pinterest.ktlint.Main'
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

task detekt(type: JavaExec, group: 'verification') {
    description = 'Check Kotlin for code smells.'
    classpath = configurations.detekt
    main = 'io.gitlab.arturbosch.detekt.cli.Main'
    args '--input', "$projectDir"
    args '--excludes', "**/generated/**,**/build/**"
    args '--config', "$qualityConfigDir/detekt/detekt-config.yml"
    args '--report', "xml:${reportsDir}/detekt/detekt.xml"
    args '--report', "html:${reportsDir}/detekt/detekt.html"
}

task xmlchecker(type: JavaExec, group: 'verification') {
    description = 'Check XML for code smells.'
    classpath = configurations.xmlchecker
    main = 'uk.co.brightec.xmlcheck.MainKt'
    args "$projectDir/src/main/res/layout"
    args '--no-fail-on-empty'
    args '--exclude', 'ClassMaterialButton,IdNaming'
}

task lintReleaseOnly(group: 'verification') {
    if (!hasProperty('android')) return

    if (android.hasProperty('applicationVariants')) {
        android.applicationVariants.all { variant ->
            if (variant.name.toLowerCase().contains('release')) {
                dependsOn tasks.named("lint${variant.name.capitalize()}").get().name
            }
        }
    }
    if (android.hasProperty('libraryVariants')) {
        android.libraryVariants.all { variant ->
            if (variant.name.toLowerCase().contains('release')) {
                dependsOn tasks.named("lint${variant.name.capitalize()}").get().name
            }
        }
    }
}
