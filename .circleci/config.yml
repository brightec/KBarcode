version: 2.1

commands:
  check_halt:
    description: Check whether to continue this job
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - run:
        command: |
          if [[ `cat /tmp/workspace/persist/job-halt` == 1 ]]; then
            echo "Job not required"
            circleci step halt
          fi
        name: Checking whether to halt this job
  checksum:
    description: Generate cache key as checksum
    steps:
    - run:
        command: ./.circleci/scripts/checksum.sh /tmp/checksum.txt
        name: Generate cache key
  download_google_services:
    description: Download google-services.json
    steps:
    - run:
        command: |
          echo $GOOGLE_SERVICES | base64 -di > app/google-services.json
        name: Download google-services.json
  load_gpg_key:
    description: Loads the Base64 encoded GPG key into a file
    steps:
      - run: echo $GPG_KEY_CONTENTS | base64 -d > $SIGNING_SECRET_KEY_RING_FILE

jobs:
  nightly_check:
    docker:
    - image: circleci/android:api-29-node
    steps:
    - run:
        command: |
          HTTP_LAST_BUILD=$(curl --write-out "HTTPSTATUS:%{http_code}" \
            --request GET \
            "$URL_BASE_KEYVALUE/$CIRCLE_PROJECT_REPONAME/$LAST_BUILD_TOKEN")
          LAST_BUILD=$(echo $HTTP_LAST_BUILD | sed -e 's/HTTPSTATUS\:.*//g')
          STATUS_LAST_BUILD=$(echo $HTTP_LAST_BUILD | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          if [ $STATUS_LAST_BUILD != 200 ]; then
            echo -e "Fetching key value for last build failed.\nStatus: $STATUS_LAST_BUILD"
            exit 1
          else
            echo "export LAST_BUILD=$LAST_BUILD" >> $BASH_ENV
          fi
        name: Get last build SHA1
    - run:
        command: |
          HTTP_SAVE_LAST_BUILD=$(curl --write-out "HTTPSTATUS:%{http_code}" \
            --request POST \
            "$URL_BASE_KEYVALUE/$CIRCLE_PROJECT_REPONAME/$LAST_BUILD_TOKEN/$CIRCLE_SHA1")
            STATUS_SAVE_LAST_BUILD=$(echo $HTTP_SAVE_LAST_BUILD | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          if [ $STATUS_SAVE_LAST_BUILD != 200 ]; then
            echo -e "Saving key value for last build failed.\nStatus: $STATUS_SAVE_LAST_BUILD"
            exit 1
          fi
        name: Save current SHA1
    - checkout
    - run:
        command: |
          mkdir -p workspace/persist
          if [ "$LAST_BUILD" != '' ] && [ $LAST_BUILD == $CIRCLE_SHA1 ]; then
            echo "Job not required"
            echo 1 > workspace/persist/job-halt
          fi
        name: Check if deployment is required
    - persist_to_workspace:
        paths:
        - persist
        root: workspace
    working_directory: ~/workspace

  tests:
    docker:
    - image: circleci/android:api-29-node
    resource_class: medium+
    steps:
    - check_halt
    - checkout
    - download_google_services
    - checksum
    - restore_cache:
        key: gradle-{{ arch }}-{{ checksum "/tmp/checksum.txt" }}
    - run:
        name: Download Dependencies
        command: ./gradlew androidDependencies
    - save_cache:
        key: gradle-{{ arch }}-{{ checksum "/tmp/checksum.txt" }}
        paths:
        - ~/.gradle
    - run:
        command: |
          if ./gradlew tasks --all | grep -q 'shared:check'; then
            ./gradlew check -x lint -x test -x shared:check
          else
            ./gradlew check -x lint -x test
          fi
        name: Run checks
    - run:
        command: |
          ./gradlew lintReleaseOnly
        name: Run lint
    - run:
        command: ./gradlew test
        name: Run Unit Tests
        no_output_timeout: 30m
    - run:
        command: ./.circleci/scripts/collect-artifacts.sh /tmp/artifacts
        name: Collect artifacts
        when: always
    - store_artifacts:
        destination: /artifacts
        path: /tmp/artifacts
    - store_test_results:
        path: app/build/test-results
    working_directory: ~/workspace

  tests_android:
    docker:
    - image: circleci/android:api-29-node
    resource_class: medium+
    steps:
    - check_halt
    - checkout
    - download_google_services
    - checksum
    - restore_cache:
        key: gradle-{{ arch }}-{{ checksum "/tmp/checksum.txt" }}
    - run:
        command: ./gradlew androidDependencies
        name: Download Dependencies
    - save_cache:
        key: gradle-{{ arch }}-{{ checksum "/tmp/checksum.txt" }}
        paths:
        - ~/.gradle
    - run:
        command: |
          if [ ! -z "$COMMAND_CREATE_APKS_TEST" ]; then
            echo "Running tests for: COMMAND_CREATE_APKS_TEST"
            eval "$COMMAND_CREATE_APKS_TEST"
            ./.circleci/scripts/test-firebase.sh $CIRCLE_PROJECT_REPONAME $CIRCLE_BUILD_NUM "/tmp/firebase_test_results/main" $FB_TEST_LAB_BUCKET
          fi
        name: Assemble and run on Firebase Test Lab
        no_output_timeout: 30m
    - store_artifacts:
        destination: /firebase_test_results
        path: /tmp/firebase_test_results
    working_directory: ~/workspace

  dist_library:
    docker:
    - image: circleci/android:api-29-node
    resource_class: medium+
    steps:
    - checkout
    - download_google_services
    - load_gpg_key
    - checksum
    - restore_cache:
        key: gradle-{{ arch }}-{{ checksum "/tmp/checksum.txt" }}
    - run:
        name: Download Dependencies
        command: ./gradlew androidDependencies
    - save_cache:
        paths:
            - ~/.gradle
        key: gradle-{{ arch }}-{{ checksum "/tmp/checksum.txt" }}
    - run:
        name: Assemble library and distribute
        command: |
          ./gradlew kbarcode:assembleRelease
          ./gradlew kbarcode:androidSourcesJar
          ./gradlew kbarcode:publishReleasePublicationToMavenCentralRepository
    - store_artifacts:
        path: kbarcode/build/outputs/aar
        destination: apk
    - store_artifacts:
        path: kbarcode/build/outputs/mapping
        destination: mapping
    working_directory: ~/workspace

parameters:
  run_checks:
    default: true
    type: boolean
  run_deploy_library:
    default: false
    type: boolean

workflows:
  checks:
    jobs:
    - tests:
        context: Android
    - tests_android:
        context: Android
        requires:
        - tests
    when: << pipeline.parameters.run_checks >>
  deploy_library:
    jobs:
    - dist_library
    when: << pipeline.parameters.run_deploy_library >>
  nightly:
    jobs:
    - nightly_check
    - tests:
        context: Android
        requires:
        - nightly_check
    - tests_android:
        context: Android
        requires:
        - tests
    triggers:
    - schedule:
        cron: 0 18 * * 1-5
        filters:
          branches:
            only: master
  release:
    jobs:
    - dist_library:
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v.*/
  version: 2
